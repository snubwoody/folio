name: CI/CD
env:
  DATABASE_URL: sqlite://data.db
  CARGO_TERM_COLOR: always
on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
concurrency:
  group: ci-${{github.ref}}-${{github.workflow}}
  cancel-in-progress: true
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Run pnpm lint
        run: pnpm -r lint
  clippy:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: rust-cache-${{runner.os}}-${{hashFiles('**/Cargo.lock')}}
          restore-keys: |
            rust-cache-${{runner.os}}-
            rust-cache-
          path: |
            packages/desktop/src-tauri/target/
            ~/.cargo
      - uses: actions/cache@v4
        id: cache-sqlx
        with:
          key: cargo-sqlx-cache-${{runner.os}} # Permanently cache sqlx
          path: ~/.cargo/bin
      - name: Install sqlx-cli
        if: ${{steps.cache-sqlx.outputs.cache-hit != 'true'}}
        run: cargo install sqlx-cli
      - name: Setup database
        run: |
          cd packages/desktop/src-tauri
          cargo sqlx database create
          cargo sqlx migrate run
      - name: Run cargo clippy
        run: |
          cd packages/desktop/src-tauri
          cargo clippy --all-features --all-targets -- -D warnings
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check formatting
        run: |
          cd packages/desktop/src-tauri
          cargo fmt --check
  test-frontend:
    permissions:
      pull-requests: write
      checks: write
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Install playwright browsers
        run: pnpm playwright install --with-deps
      - name: Run tests
        run: pnpm -r test:headless
  build-frontend:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: pnpm
      - run: pnpm install --frozen-lockfile
      - name: Build frontend
        run: pnpm -r build
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          key: rust-cache-${{runner.os}}-${{hashFiles('**/Cargo.lock')}}
          restore-keys: |
            rust-cache-${{runner.os}}-
            rust-cache-
          path: |
            packages/desktop/src-tauri/target/
            ~/.cargo
      - uses: actions/cache@v4
        id: cache-sqlx
        with:
          key: cargo-sqlx-cache-${{runner.os}} # Permanenly cache sqlx
          path: ~/.cargo/bin
      - uses: taiki-e/install-action@nextest
      - name: Install sqlx-cli
        if: ${{steps.cache-sqlx.outputs.cache-hit != 'true'}}
        run: cargo install sqlx-cli
      - name: Setup database
        run: |
          cd packages/desktop/src-tauri
          cargo sqlx database create
          cargo sqlx migrate run
      - name: Install system dependencies
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      - name: Run tests
        run: |
          cd packages/desktop/src-tauri
          cargo nextest run --locked
  bundle:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            formats: nsis
          - os: ubuntu-latest
            formats: deb,appimage,pacman
          - os: macos-latest
            formats: dmg
    runs-on: ${{matrix.os}}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: pnpm
      - uses: actions/cache@v4
        name: Cache rust
        with:
          key: rust-cache-${{runner.os}}-${{hashFiles('**/Cargo.lock')}}
          restore-keys: |
            rust-cache-${{runner.os}}-
            rust-cache-
          path: |
            packages/desktop/src-tauri/target/
            ~/.cargo
      - uses: actions/cache@v4
        id: cache-sqlx
        name: Cache sqlx
        with:
          key: cargo-sqlx-cache-${{runner.os}} 
          path: ~/.cargo/bin
      - uses: actions/cache@v4
        id: cache-cargo-bin
        name: Cache cargo binaries
        with:
          key: cargo-bin-cache-${{runner.os}}  # Temp duplicate
          path: ~/.cargo/bin
      - uses: taiki-e/install-action@nextest
      - name: Install sqlx-cli
        if: ${{steps.cache-sqlx.outputs.cache-hit != 'true'}}
        run: cargo install sqlx-cli
      - name: Setup database
        run: |
          cd packages/desktop/src-tauri
          cargo sqlx database create
          cargo sqlx migrate run
      - name: Install system dependencies
        if: ${{runner.os == 'Linux'}}
        run: |
          sudo apt update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev
      - run: pnpm install --frozen-lockfile
      - run: cargo install cargo-packager --locked
        if: ${{steps.cache-cargo-bin.outputs.cache-hit != 'true'}}
      - name: Build app
        run: |
          cd packages/desktop/src-tauri
          pnpm --filter @folio/desktop build
          cargo build --release
      - name: Bundle
        run: |
          cd packages/desktop/src-tauri
          cargo packager --release --formats ${{matrix.formats}}
      - name: Bundle msix
        if: ${{runner.os == 'Windows'}}
        run: |
          cd packages/desktop/src-tauri
          cp target/release/folio_lib.dll msix/ 
          cp target/release/folio.exe msix/ 
          makeappx pack /d msix /p target/release/folio_x64.msix
      - run: ls packages/desktop/src-tauri/target/release
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: folio-upload-${{ matrix.os }}
          path: |
            packages/desktop/src-tauri/target/release/**/*.deb
            packages/desktop/src-tauri/target/release/**/*.rpm
            packages/desktop/src-tauri/target/release/**/*.AppImage
            packages/desktop/src-tauri/target/release/**/*.msix
            packages/desktop/src-tauri/target/release/**/*-setup.exe
            packages/desktop/src-tauri/target/release/**/*.dmg
            packages/desktop/src-tauri/target/release/**/PKGBUILD
  pass:
    needs:
      - format
      - lint
      - clippy
      - test
      - test-frontend
      - build-frontend
      - bundle
    runs-on: ubuntu-latest
    steps:
      - name: Complete
        run: echo All good!
